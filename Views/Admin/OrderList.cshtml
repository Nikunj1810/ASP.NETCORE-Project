@{
    ViewBag.Title = "Orders List";
    Layout = "~/Views/Shared/Adminlayout.cshtml";
}

<style>
    .order-card {
        border: 1px solid #e0e0e0;
        border-radius: 16px;
        padding: 1.5rem;
        background-color: #fff;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s;
    }

    .order-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.08);
    }

    .order-badge {
        padding: 5px 12px;
        font-size: 0.85rem;
        border-radius: 20px;
        font-weight: 500;
    }

    .order-table th, .order-table td {
        vertical-align: middle;
    }

    .breadcrumb {
        font-size: 0.95rem;
        color: #6c757d;
    }

    .breadcrumb a {
        color: #007bff;
        text-decoration: none;
    }

    .breadcrumb a:hover {
        text-decoration: underline;
    }

    .order-actions {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }
</style>

<div class="container py-5">
    @Html.AntiForgeryToken()
    <div class="breadcrumb mb-4">
        <a href="@Url.Action("Dashboard", "Admin")">Dashboard</a> &gt; <span>Order List</span>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
        TempData.Remove("SuccessMessage");
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
        TempData.Remove("ErrorMessage");
    }

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="fw-bold text-dark">Recent Purchases</h3>
        <form method="get" action="@Url.Action("OrderList", "Admin")" class="d-flex">
            <select name="status" class="form-select me-2">
                <option value="">All Orders</option>
                <option value="pending" selected="@(ViewBag.CurrentStatus == "pending")">Pending</option>
                <option value="processing" selected="@(ViewBag.CurrentStatus == "processing")">Processing</option>
                <option value="shipped" selected="@(ViewBag.CurrentStatus == "shipped")">Shipped</option>
                <option value="delivered" selected="@(ViewBag.CurrentStatus == "delivered")">Delivered</option>
                <option value="cancelled" selected="@(ViewBag.CurrentStatus == "cancelled")">Cancelled</option>
            </select>
            <button type="submit" class="btn btn-dark">Filter</button>
        </form>
    </div>

    <div class="order-card mb-4">
        <div class="table-responsive">
            <table class="table table-hover order-table mb-0">
                <thead class="table-light">
                    <tr>
                        <th>Product</th>
                        <th>Order ID</th>
                        <th>Date</th>
                        <th>Customer Name</th>
                        <th>Status</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Model)
                    {
                        <tr class="order-row" data-order-id="@order.Id">
                            <td>@(order.Items.Count > 0 ? order.Items[0].Name : "N/A")</td>
                            <td>@order.Id</td>
                            <td>@order.OrderDate.ToString("MM/dd/yyyy")</td>
                            <td>@(order.ShippingInfo?.FullName ?? "N/A")</td>
                            <td>
                                <select class="form-select status-select" data-order-id="@order.Id" style="width: 140px;">
                                    <option value="pending" selected="@(order.Status == "pending")">Pending</option>
                                    <option value="processing" selected="@(order.Status == "processing")">Processing</option>
                                    <option value="shipped" selected="@(order.Status == "shipped")">Shipped</option>
                                    <option value="delivered" selected="@(order.Status == "delivered")">Delivered</option>
                                    <option value="cancelled" selected="@(order.Status == "cancelled")">Cancelled</option>
                                </select>
                            </td>
                            <td>₹@order.OrderTotal.ToString("N2")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item"><a class="page-link" href="#">«</a></li>
            <li class="page-item"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">»</a></li>
        </ul>
    </nav>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const rows = document.querySelectorAll('.order-row');
        const statusSelects = document.querySelectorAll('.status-select');

        // Handle individual status changes
        statusSelects.forEach(select => {
            select.addEventListener('change', function() {
                const orderId = this.dataset.orderId;
                const newStatus = this.value;
                
                // Show loading state
                select.disabled = true;
                
                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!token) {
                    console.error('Anti-forgery token not found');
                    return;
                }

                fetch('@Url.Action("UpdateOrderStatus", "Admin")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token.value
                    },
                    body: JSON.stringify({
                        orderIds: [orderId],
                        status: newStatus
                    })
                })
                .then(async response => {
                    const data = await response.json();
                    if (!response.ok) {
                        throw new Error(data.message || 'Failed to update order status');
                    }
                    return data;
                })
                .then(data => {
                    if (data.success) {
                        // Show success message
                        const alertDiv = document.createElement('div');
                        alertDiv.className = 'alert alert-success alert-dismissible fade show';
                        alertDiv.innerHTML = `
                            ${data.message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        `;
                        document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.d-flex'));
                        
                        // Update the previous value to reflect the successful change
                        this.setAttribute('data-previous-value', newStatus);
                    } else {
                        throw new Error(data.message || 'Failed to update order status');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    const alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-danger alert-dismissible fade show';
                    alertDiv.innerHTML = `
                        ${error.message || 'An error occurred while updating the order status'}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    `;
                    document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.d-flex'));
                    // Revert the select to its previous value
                    this.value = this.getAttribute('data-previous-value');
                })
                .finally(() => {
                    select.disabled = false;
                });

                // Store the current value as previous value
                this.setAttribute('data-previous-value', this.value);
            });

            // Store initial value
            select.setAttribute('data-previous-value', select.value);
        });

        // Row click handler for order details
        rows.forEach(row => {
            row.addEventListener('click', function (e) {
                if (!e.target.classList.contains('status-select')) {
                    const orderId = this.dataset.orderId;
                    window.location.href = '@Url.Action("OrderDetail", "Admin")?orderId=' + orderId;
                }
            });
        });
    });
</script>
