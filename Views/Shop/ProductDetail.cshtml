@model ASP.netcore_Project.Models.ProductModel

@{
    ViewData["Title"] = Model.Name;
    var isLoggedIn = Context.Session.GetString("UserId") != null;
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<style>
    .price-now {
        font-size: 2rem;
        color: black;
        font-weight: 700;
    }

    .price-old {
        text-decoration: line-through;
        color: #6c757d;
        font-size: 1.2rem;
    }

    .discount-badge {
        background-color: #dc3545;
        color: white;
        font-size: 0.9rem;
        padding: 0.3rem 0.6rem;
        border-radius: 5px;
    }

    .size-button {
        padding: 10px 20px;
        border: 1px solid #000;
        border-radius: 50px;
        background-color: white;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }

        .size-button:hover,
        .size-button.active {
            background-color: #000;
            color: white;
        }

    .add-to-cart-btn {
        background-color: #000;
        color: white;
        padding: 14px 28px;
        border: none;
        border-radius: 30px;
        font-size: 1.1rem;
        transition: background-color 0.3s ease;
    }

        .add-to-cart-btn:hover {
            background-color: #333;
        }
</style>

<div class="container py-5">
    <div class="row g-5">
        <!-- Product Image -->
        <div class="col-md-6 text-center">
            <img src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid rounded shadow" style="max-height: 500px; object-fit: contain;" />
        </div>

        <!-- Product Details -->
        <div class="col-md-6">
            <h1 class="fw-bold">@Model.Name</h1>

            <div class="d-flex align-items-center gap-3 mt-2">
                <span class="price-now">₹@Model.Price</span>
                @if (Model.OriginalPrice > Model.Price)
                {
                    <span class="price-old">₹@Model.OriginalPrice</span>
                    <span class="discount-badge">Save @Model.DiscountPercentage%</span>
                }
            </div>

            <p class="mt-3 mb-1"><strong>Brand:</strong> @Model.Brand</p>
            <p><strong>Category:</strong> @Model.Category</p>
            <p class="text-muted">@Model.Description</p>

            <form asp-controller="Cart" asp-action="AddToCart" method="post" id="cartForm">
                @Html.AntiForgeryToken() <!-- ✅ CSRF protection token -->

                <input type="hidden" name="ProductId" value="@Model.Id" />
                <input type="hidden" name="Size" id="selectedSizeInput" />

                @if (Model.Sizes != null && Model.Sizes.Any())
                {
                    <div class="mt-4">
                        <h6 class="fw-semibold mb-2">Select Size:</h6>
                        <div class="d-flex flex-wrap gap-2" id="sizeOptions">
                            @foreach (var size in Model.Sizes)
                            {
                                <button type="button" class="size-button" data-size="@size.Size" @(size.Quantity == 0 ? "disabled" : "") title="Available: @size.Quantity">
                                    @size.Size
                                </button>
                            }
                        </div>
                    </div>
                }

                <div class="mt-4">
                    <label for="Quantity" class="form-label fw-semibold">Quantity:</label>
                    <input type="number" name="Quantity" id="quantityInput" class="form-control w-25" min="1" value="1" />
                </div>

                <div class="mt-4">
                    <button type="submit" class="add-to-cart-btn w-100">Add to Cart</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    const sizeButtons = document.querySelectorAll('.size-button');
    const selectedSizeInput = document.getElementById('selectedSizeInput');
    const isLoggedIn = @Html.Raw(Json.Serialize(isLoggedIn)); // ✅ Proper boolean

    sizeButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            sizeButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            selectedSizeInput.value = btn.getAttribute('data-size');
        });
    });

    document.getElementById('cartForm').addEventListener('submit', function (e) {
        if (!isLoggedIn) {
            e.preventDefault();
            alert("Please login to add items to cart.");
            window.location.href = "/Account/Login";
            return;
        }

        if (!selectedSizeInput.value) {
            e.preventDefault();
            alert("Please select a size before adding to cart.");
        }
    });
</script>
